// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ConversationProtobuf {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_ConversationPackage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ConversationPackage, global::ConversationPackage.Builder> internal__static_ConversationPackage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Conversation__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Conversation, global::Conversation.Builder> internal__static_Conversation__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ConversationNode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ConversationNode, global::ConversationNode.Builder> internal__static_ConversationNode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Connection__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Connection, global::Connection.Builder> internal__static_Connection__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static ConversationProtobuf() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "ChpDb252ZXJzYXRpb25Qcm90b2J1Zi5wcm90byI7ChNDb252ZXJzYXRpb25Q" + 
        "YWNrYWdlEiQKDWNvbnZlcnNhdGlvbnMYASADKAsyDS5Db252ZXJzYXRpb24i" + 
        "TgoMQ29udmVyc2F0aW9uEh8KBHJvb3QYASACKAsyES5Db252ZXJzYXRpb25O" + 
        "b2RlEgwKBG5hbWUYAiABKAkSDwoHY3JlYXRvchgDIAEoCSJCChBDb252ZXJz" + 
        "YXRpb25Ob2RlEgwKBHRleHQYASACKAkSIAoLY29ubmVjdGlvbnMYAiADKAsy" + 
        "Cy5Db25uZWN0aW9uIjsKCkNvbm5lY3Rpb24SHwoEbm9kZRgBIAIoCzIRLkNv" + 
        "bnZlcnNhdGlvbk5vZGUSDAoEdGV4dBgCIAIoCUIhCh9zdHNxdWVzdGJ1aWxk" + 
        "ZXIucHJvdG9jb2xidWZmZXJz");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_ConversationPackage__Descriptor = Descriptor.MessageTypes[0];
      internal__static_ConversationPackage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ConversationPackage, global::ConversationPackage.Builder>(internal__static_ConversationPackage__Descriptor,
              new string[] { "Conversations", });
      internal__static_Conversation__Descriptor = Descriptor.MessageTypes[1];
      internal__static_Conversation__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Conversation, global::Conversation.Builder>(internal__static_Conversation__Descriptor,
              new string[] { "Root", "Name", "Creator", });
      internal__static_ConversationNode__Descriptor = Descriptor.MessageTypes[2];
      internal__static_ConversationNode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ConversationNode, global::ConversationNode.Builder>(internal__static_ConversationNode__Descriptor,
              new string[] { "Text", "Connections", });
      internal__static_Connection__Descriptor = Descriptor.MessageTypes[3];
      internal__static_Connection__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Connection, global::Connection.Builder>(internal__static_Connection__Descriptor,
              new string[] { "Node", "Text", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationPackage : pb::GeneratedMessage<ConversationPackage, ConversationPackage.Builder> {
  private ConversationPackage() { }
  private static readonly ConversationPackage defaultInstance = new ConversationPackage().MakeReadOnly();
  private static readonly string[] _conversationPackageFieldNames = new string[] { "conversations" };
  private static readonly uint[] _conversationPackageFieldTags = new uint[] { 10 };
  public static ConversationPackage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ConversationPackage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ConversationPackage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ConversationProtobuf.internal__static_ConversationPackage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ConversationPackage, ConversationPackage.Builder> InternalFieldAccessors {
    get { return global::ConversationProtobuf.internal__static_ConversationPackage__FieldAccessorTable; }
  }
  
  public const int ConversationsFieldNumber = 1;
  private pbc::PopsicleList<global::Conversation> conversations_ = new pbc::PopsicleList<global::Conversation>();
  public scg::IList<global::Conversation> ConversationsList {
    get { return conversations_; }
  }
  public int ConversationsCount {
    get { return conversations_.Count; }
  }
  public global::Conversation GetConversations(int index) {
    return conversations_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Conversation element in ConversationsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _conversationPackageFieldNames;
    if (conversations_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], conversations_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Conversation element in ConversationsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ConversationPackage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ConversationPackage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ConversationPackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ConversationPackage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ConversationPackage MakeReadOnly() {
    conversations_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ConversationPackage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ConversationPackage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ConversationPackage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ConversationPackage result;
    
    private ConversationPackage PrepareBuilder() {
      if (resultIsReadOnly) {
        ConversationPackage original = result;
        result = new ConversationPackage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ConversationPackage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ConversationPackage.Descriptor; }
    }
    
    public override ConversationPackage DefaultInstanceForType {
      get { return global::ConversationPackage.DefaultInstance; }
    }
    
    public override ConversationPackage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ConversationPackage) {
        return MergeFrom((ConversationPackage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ConversationPackage other) {
      if (other == global::ConversationPackage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.conversations_.Count != 0) {
        result.conversations_.Add(other.conversations_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_conversationPackageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _conversationPackageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.conversations_, global::Conversation.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Conversation> ConversationsList {
      get { return PrepareBuilder().conversations_; }
    }
    public int ConversationsCount {
      get { return result.ConversationsCount; }
    }
    public global::Conversation GetConversations(int index) {
      return result.GetConversations(index);
    }
    public Builder SetConversations(int index, global::Conversation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.conversations_[index] = value;
      return this;
    }
    public Builder SetConversations(int index, global::Conversation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.conversations_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConversations(global::Conversation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.conversations_.Add(value);
      return this;
    }
    public Builder AddConversations(global::Conversation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.conversations_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConversations(scg::IEnumerable<global::Conversation> values) {
      PrepareBuilder();
      result.conversations_.Add(values);
      return this;
    }
    public Builder ClearConversations() {
      PrepareBuilder();
      result.conversations_.Clear();
      return this;
    }
  }
  static ConversationPackage() {
    object.ReferenceEquals(global::ConversationProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Conversation : pb::GeneratedMessage<Conversation, Conversation.Builder> {
  private Conversation() { }
  private static readonly Conversation defaultInstance = new Conversation().MakeReadOnly();
  private static readonly string[] _conversationFieldNames = new string[] { "creator", "name", "root" };
  private static readonly uint[] _conversationFieldTags = new uint[] { 26, 18, 10 };
  public static Conversation DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Conversation DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Conversation ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ConversationProtobuf.internal__static_Conversation__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Conversation, Conversation.Builder> InternalFieldAccessors {
    get { return global::ConversationProtobuf.internal__static_Conversation__FieldAccessorTable; }
  }
  
  public const int RootFieldNumber = 1;
  private bool hasRoot;
  private global::ConversationNode root_;
  public bool HasRoot {
    get { return hasRoot; }
  }
  public global::ConversationNode Root {
    get { return root_ ?? global::ConversationNode.DefaultInstance; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CreatorFieldNumber = 3;
  private bool hasCreator;
  private string creator_ = "";
  public bool HasCreator {
    get { return hasCreator; }
  }
  public string Creator {
    get { return creator_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoot) return false;
      if (!Root.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _conversationFieldNames;
    if (hasRoot) {
      output.WriteMessage(1, field_names[2], Root);
    }
    if (hasName) {
      output.WriteString(2, field_names[1], Name);
    }
    if (hasCreator) {
      output.WriteString(3, field_names[0], Creator);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRoot) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Root);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasCreator) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Creator);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Conversation ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Conversation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Conversation ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Conversation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Conversation ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Conversation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Conversation ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Conversation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Conversation ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Conversation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Conversation MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Conversation prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Conversation, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Conversation cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Conversation result;
    
    private Conversation PrepareBuilder() {
      if (resultIsReadOnly) {
        Conversation original = result;
        result = new Conversation();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Conversation MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Conversation.Descriptor; }
    }
    
    public override Conversation DefaultInstanceForType {
      get { return global::Conversation.DefaultInstance; }
    }
    
    public override Conversation BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Conversation) {
        return MergeFrom((Conversation) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Conversation other) {
      if (other == global::Conversation.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoot) {
        MergeRoot(other.Root);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCreator) {
        Creator = other.Creator;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_conversationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _conversationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ConversationNode.Builder subBuilder = global::ConversationNode.CreateBuilder();
            if (result.hasRoot) {
              subBuilder.MergeFrom(Root);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Root = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasCreator = input.ReadString(ref result.creator_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoot {
     get { return result.hasRoot; }
    }
    public global::ConversationNode Root {
      get { return result.Root; }
      set { SetRoot(value); }
    }
    public Builder SetRoot(global::ConversationNode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRoot = true;
      result.root_ = value;
      return this;
    }
    public Builder SetRoot(global::ConversationNode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRoot = true;
      result.root_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRoot(global::ConversationNode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRoot &&
          result.root_ != global::ConversationNode.DefaultInstance) {
          result.root_ = global::ConversationNode.CreateBuilder(result.root_).MergeFrom(value).BuildPartial();
      } else {
        result.root_ = value;
      }
      result.hasRoot = true;
      return this;
    }
    public Builder ClearRoot() {
      PrepareBuilder();
      result.hasRoot = false;
      result.root_ = null;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCreator {
      get { return result.hasCreator; }
    }
    public string Creator {
      get { return result.Creator; }
      set { SetCreator(value); }
    }
    public Builder SetCreator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreator = true;
      result.creator_ = value;
      return this;
    }
    public Builder ClearCreator() {
      PrepareBuilder();
      result.hasCreator = false;
      result.creator_ = "";
      return this;
    }
  }
  static Conversation() {
    object.ReferenceEquals(global::ConversationProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationNode : pb::GeneratedMessage<ConversationNode, ConversationNode.Builder> {
  private ConversationNode() { }
  private static readonly ConversationNode defaultInstance = new ConversationNode().MakeReadOnly();
  private static readonly string[] _conversationNodeFieldNames = new string[] { "connections", "text" };
  private static readonly uint[] _conversationNodeFieldTags = new uint[] { 18, 10 };
  public static ConversationNode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ConversationNode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ConversationNode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ConversationProtobuf.internal__static_ConversationNode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ConversationNode, ConversationNode.Builder> InternalFieldAccessors {
    get { return global::ConversationProtobuf.internal__static_ConversationNode__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public const int ConnectionsFieldNumber = 2;
  private pbc::PopsicleList<global::Connection> connections_ = new pbc::PopsicleList<global::Connection>();
  public scg::IList<global::Connection> ConnectionsList {
    get { return connections_; }
  }
  public int ConnectionsCount {
    get { return connections_.Count; }
  }
  public global::Connection GetConnections(int index) {
    return connections_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      foreach (global::Connection element in ConnectionsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _conversationNodeFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[1], Text);
    }
    if (connections_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], connections_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Text);
      }
      foreach (global::Connection element in ConnectionsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ConversationNode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationNode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationNode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationNode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationNode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationNode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ConversationNode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ConversationNode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ConversationNode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationNode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ConversationNode MakeReadOnly() {
    connections_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ConversationNode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ConversationNode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ConversationNode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ConversationNode result;
    
    private ConversationNode PrepareBuilder() {
      if (resultIsReadOnly) {
        ConversationNode original = result;
        result = new ConversationNode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ConversationNode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ConversationNode.Descriptor; }
    }
    
    public override ConversationNode DefaultInstanceForType {
      get { return global::ConversationNode.DefaultInstance; }
    }
    
    public override ConversationNode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ConversationNode) {
        return MergeFrom((ConversationNode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ConversationNode other) {
      if (other == global::ConversationNode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      if (other.connections_.Count != 0) {
        result.connections_.Add(other.connections_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_conversationNodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _conversationNodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.connections_, global::Connection.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::Connection> ConnectionsList {
      get { return PrepareBuilder().connections_; }
    }
    public int ConnectionsCount {
      get { return result.ConnectionsCount; }
    }
    public global::Connection GetConnections(int index) {
      return result.GetConnections(index);
    }
    public Builder SetConnections(int index, global::Connection value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.connections_[index] = value;
      return this;
    }
    public Builder SetConnections(int index, global::Connection.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.connections_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConnections(global::Connection value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.connections_.Add(value);
      return this;
    }
    public Builder AddConnections(global::Connection.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.connections_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConnections(scg::IEnumerable<global::Connection> values) {
      PrepareBuilder();
      result.connections_.Add(values);
      return this;
    }
    public Builder ClearConnections() {
      PrepareBuilder();
      result.connections_.Clear();
      return this;
    }
  }
  static ConversationNode() {
    object.ReferenceEquals(global::ConversationProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Connection : pb::GeneratedMessage<Connection, Connection.Builder> {
  private Connection() { }
  private static readonly Connection defaultInstance = new Connection().MakeReadOnly();
  private static readonly string[] _connectionFieldNames = new string[] { "node", "text" };
  private static readonly uint[] _connectionFieldTags = new uint[] { 10, 18 };
  public static Connection DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Connection DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Connection ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ConversationProtobuf.internal__static_Connection__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Connection, Connection.Builder> InternalFieldAccessors {
    get { return global::ConversationProtobuf.internal__static_Connection__FieldAccessorTable; }
  }
  
  public const int NodeFieldNumber = 1;
  private bool hasNode;
  private global::ConversationNode node_;
  public bool HasNode {
    get { return hasNode; }
  }
  public global::ConversationNode Node {
    get { return node_ ?? global::ConversationNode.DefaultInstance; }
  }
  
  public const int TextFieldNumber = 2;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasNode) return false;
      if (!hasText) return false;
      if (!Node.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _connectionFieldNames;
    if (hasNode) {
      output.WriteMessage(1, field_names[0], Node);
    }
    if (hasText) {
      output.WriteString(2, field_names[1], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNode) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Connection ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Connection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Connection ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Connection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Connection ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Connection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Connection ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Connection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Connection ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Connection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Connection MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Connection prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Connection, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Connection cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Connection result;
    
    private Connection PrepareBuilder() {
      if (resultIsReadOnly) {
        Connection original = result;
        result = new Connection();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Connection MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Connection.Descriptor; }
    }
    
    public override Connection DefaultInstanceForType {
      get { return global::Connection.DefaultInstance; }
    }
    
    public override Connection BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Connection) {
        return MergeFrom((Connection) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Connection other) {
      if (other == global::Connection.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNode) {
        MergeNode(other.Node);
      }
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_connectionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _connectionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ConversationNode.Builder subBuilder = global::ConversationNode.CreateBuilder();
            if (result.hasNode) {
              subBuilder.MergeFrom(Node);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Node = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNode {
     get { return result.hasNode; }
    }
    public global::ConversationNode Node {
      get { return result.Node; }
      set { SetNode(value); }
    }
    public Builder SetNode(global::ConversationNode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNode = true;
      result.node_ = value;
      return this;
    }
    public Builder SetNode(global::ConversationNode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasNode = true;
      result.node_ = builderForValue.Build();
      return this;
    }
    public Builder MergeNode(global::ConversationNode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasNode &&
          result.node_ != global::ConversationNode.DefaultInstance) {
          result.node_ = global::ConversationNode.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
      } else {
        result.node_ = value;
      }
      result.hasNode = true;
      return this;
    }
    public Builder ClearNode() {
      PrepareBuilder();
      result.hasNode = false;
      result.node_ = null;
      return this;
    }
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static Connection() {
    object.ReferenceEquals(global::ConversationProtobuf.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
